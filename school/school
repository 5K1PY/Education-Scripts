#!/usr/bin/env python

import argparse
from functools import partial
from signal import signal, SIGINT

from course import Courses
from homework import Homeworks
from utilities import *

# catch SIGINT and prevent it from terminating the script, since an instance of Ranger
# might be running and it crashes when called using subprocess.Popen (might be related
# to https://github.com/ranger/ranger/issues/898)
signal(SIGINT, lambda _, __: None)


### GLOBAL VARIABLES ###
# change path to current folder for the script to work
# remember it, though, since we might need it
cwd = os.getcwd()
os.chdir(os.path.dirname(os.path.realpath(__file__)))


### ARGUMENTS ###
parser = argparse.ArgumentParser(
    description="A script for simplifying my university education.",
    formatter_class=argparse.RawTextHelpFormatter,
)

parser.add_argument(
    "actions",
    nargs="+",
    help=(
        "list\n"
        "├── courses <when>\n"
        "├── finals\n"
        "└── timeline\n"
        "resources <course name/abbreviation/'all'>\n"
        "cron\n"
        "open\n"
        "├── course  <course name/abbreviation>\n"
        "├── website <course name/abbreviation>\n"
        "├── lsf     <course name/abbreviation>\n"
        "└── notes   <course name/abbreviation>\n"
        "initialize\n"
        "homework\n"
        "├── list                   <course name/abbreviation/'all'>\n"
        "├── add or new             <course name/abbreviation>\n"
        "├── edit                   <homework UID>\n"
        "├── remove or delete       <homework UID>\n"
        "├── complete or finish     <homework UID>\n"
        "└── incomplete or unfinish <homework UID>\n"
    ),
)

parser.add_argument("-s", "--short", action="store_true", help="shorten the output")
parser.add_argument(
    "-f", "--folder", help="set the courses folder (overrides config file)"
)


arguments = parser.parse_args()

courses = Courses(arguments.folder or courses_folder)
homeworks = Homeworks(courses)

action_tree = {
    ("list",): {
        ("courses",): courses.list,
        ("finals",): courses.finals,
        ("timeline",): courses.timeline,
    },
    ("resources",): courses.resources,
    ("cron",): courses.compile_cron_jobs,
    ("open",): {
        ("course",): partial(courses.open, "folder"),
        ("website",): partial(courses.open, "website"),
        ("lsf",): partial(courses.open, "lsf"),
        ("notes",): partial(courses.open, "notes"),
        ("online",): partial(courses.open, "online"),
    },
    ("initialize",): partial(courses.initialize, cwd),
    ("homework",): {
        ("list",): homeworks.list,
        ("add", "new"): homeworks.add,
        ("edit",): homeworks.edit,
        ("remove", "delete"): homeworks.delete,
        ("complete", "finish"): homeworks.complete,
        ("incomplete", "unfinish"): homeworks.incomplete,
    },
}


# go down the action tree
while len(arguments.actions) != 0 and isinstance(action_tree, dict):
    action = arguments.actions.pop(0)

    # sort the actions by their common prefix with the argument
    actions = sorted(
        (max([len(action) if s.startswith(action) else 0 for s in d]), d)
        for d in action_tree
    )

    # if no match is found, quit with error
    if actions[-1][0] == 0:
        sys.exit(
            f"ERROR: '{action}' doesn't match actions in the action tree:"
            f" {{{', '.join(' or '.join(d) for d in action_tree)}}}"
        )

    # filter out the sub-optimal actions
    actions = list(filter(lambda x: x[0] == actions[-1][0], actions))

    # if there are multiple optimal solutions, the command is ambiguous
    if len(actions) > 1:
        sys.exit(
            f"ERROR: Ambiguous actions for '{action}':"
            f" {{{', '.join(' or '.join(d) for _, d in actions)}}}",
        )
    else:
        action_tree = action_tree[actions[0][1]]

# if the action tree isn't a function by now, exit; else extract the function
if isinstance(action_tree, dict):
    sys.exit(
        "ERROR: Actions remaining:"
        f" {{{', '.join(' or '.join(d) for d in action_tree)}}}"
    )

try:
    action_tree(*arguments.actions, **vars(arguments))
except TypeError as e:
    exit_with_error("Invalid arguments for the specified action.")
